<!DOCTYPE html>
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    link(rel="stylesheet", href="pychemin.css")
    title PyChemin
  body
    h1 PyChemin
    p.intro Un langage simple et naturel pour écrires des aventures textuelles interactives
    
    h2 La syntaxe
    p PyChemin utilise une syntaxe très brève, constituée de séquences de caractères que l'on ne peut trouver facilement dans du texte, permettant l'écriture de contenu sans encombres. Pas d'ambiguité possible.
    
    h3 Narrateur
    p Quand le narrateur parle écrivez simplement votre texte. Pas de syntaxe nécéssaire, car c'est le plus utilisé dans une histoire textuelle:
    pre Il était une fois, en 2020, un langage de description d'histoire
    
    h3 Personnage
    p Quand un personnage parle, la syntaxe reste très légère:
    pre
      strong [
      | Personnage
      strong ]
      |  Bonjour, monde!
    p #[code Personnage] fait référence à l'objet correspondant définit dans #[code characters.py]. Le nom affiché à l'utilisateur sera la propriété #[code name] de l'objet.
    
    h3 Questions au joueur
    p Vous serez sûrement amené, dans votre histoire, à interagir avec votre personnage.
    | Voici comment s'y prendre:
    pre.
      #[strong ?] Psst, choisissez un langage de programmation!
      #[strong >> js, javascript, python, ruby]
          [Ewen] Tu aimes le haut-niveau toi!
      #[strong >> cpp, c++, c]
          [Ewen] Hmm. Je vois. Moi les pointeurs, ça me fait peur!
      #[strong >?.]
          [Ewen] Ah. Je ne connais pas ton langage. Tan pis, ça à l'air de te plaire, et c'est l'essentiel!
    p La première ligne, commençant par un "?", est facultative. Elle permet d'aider le joueur à repondre à la question, mais, la plupart du temps, le narrateur guide les choix du joueur.
    p Les lignes commençant par ">>" indiquent les choix possibles, séparés par des virgules. Tout les réponses données par le joueur qui sont dans cette liste effectueront les actions dans ce bloc.
    p Ne vous inquiétez pas, PyChemin est assez intelligent pour comprendre que "javascirpt" correspond à la première ligne (#[a(href="#input-processing") Voir comment])
    p La ligne ">?." Indique quoi faire si le joueur répond en dehors des clous. En écrivant ">?" au lieu de ">?.", on indique à PyChemin que la question doit ensuite être posée de nouveau. Avec un point à la fin, l'histoire continue normalement.
    p "Et si j'ai plusieurs choix et que le joueur doit passer par toutes les réponses?"
    p Pas de soucis. Utilisez ">*" au lieu de ">>":
    pre.
      [Mitsuha] Il doit bien être quelque part! Cherche dans ce cabanon
      Vous vous dirigez vers un cabanon, recouvert par des lianes.
      Après plusieurs minutes de combat, vous entrez dans le cabanon.
      Il y a un pot de miel, une guitare et un trombone, tous posés sur un coffre au fond de la salle.
      #[strong >* Miel]
        Le miel semble bon. 
        Mais vu la date de péremption, dépassée depuis 32 ans, vous ne risquez pas une tartine.
      #[strong >* Guitare]
        Elle est totalement désaccordée
      #[strong >* Trombonne]
        Il requiert tant de souffle que vous n'arrivez pas à en faire sortir un seul son
      Après avoir inspecté tout les objets de la pièce, vous remarquez que le soleil a changé.
    
    h3 Chapitres & Actes
    p Vous pouvez facilement découper votre histoire en actes et en chapitres:
      pre.
        #[strong ===] Le Nouvel Ordre #[strong ===]
        [GénéralDuWSL] Suivez moi.
        
        #[strong ---] Le mystère des acronymes #[strong ---]
      p Notez que le nombre de tirets ou de signes égal ("=") doit être au minimum de 2
      p La numérotation des chapitres & actes se fait automatiquement. Voici ce que verra l'utilisateur:
      .image: img(src="./chapters_acts.png")
      
    h3 Découpez votre histoire
    p Quand votre magnifique histoire interactive aura grandi, il est important de rester organisé et de ne pas avoir 90 000 000 lignes dans un fichier. 
    p C'est pour ça qu'il est important de créer plusieurs fichiers, et de charger les bons au bon moment.
    p Pour ce faire, créer d'autres fichiers #[code .pychemin] dans le même dossier, et utilisez des underscores "_" au lieu des espaces.
    p En suite, pour les appeler dans votre histoire, rien de plus simple:
    pre.
      Vos choix pourront peut-être changer l’histoire... A vous de choisir votre camp.
      >> reine, lydia, von hardenberg, royaume
          #[strong -> côté reine] #[em 1]
      >> resistance, revolte, rebellion, résistant
          #[strong -> côté résistance] #[em 2]
      >?
          Veuillez choisir un camp !
    dl.horizontal
      dt: em 1
      dd Lancera "cote_reine.pychemin"
      br
      dt: em 2
      dd Lancera "cote_resistance.pychemin"
      
    h3 Changer des stats
    p Votre joueur ainsi que les personnages avec qui il interagit ont sûrement plusieurs propriétés pouvant changer en fonction des actions. Vous pouvez changer ces propriétés facilement, voici la syntaxe:
    pre #[strong @]Cible#[strong :]propriété opération
    p Plusieurs opérations sont disponibles
    dl
      dt Ajouter, soustraire ou multiplier
      dd 
        p Utilisez les symboles usuels: #[code +], #[code -] et #[code *]
        pre @Melinda:relation #[strong +5]
      dt Régler à une valeur avec #[code =]
      dd
        p Règle à une valeur donnée, peut importe la valeur précédente.
        p C'est la seule opération qui peut accepter des #[a(href="#interpolations") interpolations].
        pre.
          Vous finissez par craquer et mangez le pot de miel entier.
          @Player:food #[strong +100]
          Il est bon, certes, mais vous avez une sensation curieuse pendant un instant.
          Vous en revoulez.
          Vous en revoulez tellement qu'il y avait sûrement de la nicotine dedans.
          Hélàs, le pot n'est plus qu'un verre totalement transparent.
          @Player:hungry_for_honey #[strong =1]
    p Quand la cible est le joueur, vous pouvez l'omettre:
    pre @food -15
    p Revient à faire...
    pre @Player:food -15
    
    p Quand votre stat sera changée, le joueur le vera dans l'interface.
    p Comme le nom de propriété lié à l'objet python n'est pas toujours très joli, il faut associer le nom de propriété à un nom lisible.
    p Pour ce faire, ouvrez #[code constants.py] et ajouter des entrées dans le dictionnaire #[code STAT_NAMES]
    p Les propriétés n'ayant pas de nom correspondant seront quand même modifiée, mais n'apparaîtront pas dans l'interace, ce qui peut être pratique.
    
    h3 Les conditions
    p Pour exécuter du code conditonnellement sans avoir à demander l'avis du joueur, vous pouvez utiliser des conditions:
    pre.
      #[strong =? #is_from == 'siberia'] #[em 1]
        [Boris] Salut, je te sers une bière?
      #[strong =? #is_from == 'grand_harz'] #[em 2]
        Борис ne semble pas vouloir vous parler.
      #[strong =!] #[em 3]
        [Boris] Salut !
    dl.horizontal
      dt: em 1
      dd La condition à mettre après #[code =?] est du code python, avec #[code #truc] remplacé par #[code self.player.truc].
      br
      
      dt: em 2
      dd Plusieurs #[code =?] peuvent être comme on echaînerait des #[code if...elif...elif...]
      br
      
      dt: em 3
      dd Code à exécuter si l'action précédente est fausse
    
    h3#interpolations Inclure du contenu dynamique
    p Comment faire dire à un personnage "Salut, (nom du joueur ici)" ?
    p PyChemin propose la syntaxe suivante:
    pre [Melinda] Hello, #[strong #name] !
    p Ici, #[code #name] sera remplacé par le nom du joueur.
    p Voici la liste des variables utilisables
    dl
      dt name
      dd Le nom du joueur
      dt answer
      dd La dernière réponse du joueur.

  h2 Comment ça marche?
  h3 characters.py et player.py
  p Certaines données sont décrites par des objets python. Tout les personnages sont des objets de la classe #[code Character] et le personnage est un objet de la classe #[code Player].
  p Par exemple, voici comment est ajouté un personnage que l'on pourra référencer par "GénéralDuWSL" dans le fichier pychemin:
  .filename characters.py
  pre. 
    GénéralDuWSL = Character(
      name="Général du WSL",
      # ...
    )
  p Les deux classes héritent de la classe #[code Being], qui implémente le changement de stat, car cette action est la même que la cible soit le joueur ou un personnage.
  h3 grammar.lark
  p
    | La grammaire décrit la syntaxe d'un langage, par exemple, la ligne suivante
    pre [Momodini] Vous avez eu 20/20 en IZN, #name !
    | est décrite comme une #[code char_line] &mdash; ou ligne de personnage &mdash; et représente un texte prononcé par le personnage "Momodini".
  p PyChemin utilise une libraire appelée #[a(href="https://lark-parser.readthedocs.io/en/latest/") lark] pour décrire et parser sa grammaire.
  p
    | La ligne de l'exemple précédent est décrite comme ceci:
    .filename grammar.lark
    pre.
      _char_text: _text
      _char_name: "[" /[^\]]+/ "]"
      char_line.2: _char_name " "* _char_text
  p On n'entrera pas dans les détails de cette syntaxe mais, basiquement, un fichier de grammaire est composé de plusieurs règles, chacune décrivant des motifs pouvant être rencontré dans le texte à parser.
  p Ici, la ligne #[code _char_name: "[" /[^\]]+/ "]"] déclare une règle, appelée #[code char_name], qui décrit la composition d'un nom de personnage:
  ol
    li Un caractère "[" 
    li#fn-1-ref-1 N'importe quel caractère excepté "]", une fois ou plus (en utilisant des expressions régulières#[sup: a(href="#fn-1" title="Nous n'expliquerons pas les expressions régulières ici, mais vous pouvez vous renseigner en ligne") 1])
    li Un caractère "]"
  p Une règle peut en contenir d'autres: la ligne #[code char_line.2: _char_name " "* _char_text] fait référence à deux autres règles.
  p Le fichier contient plusieurs de ces règles, et lark va les utiliser pour parser notre fichier #[code .pychemin]
  
  h3 parser.py
  p Le travail du parser, c'est de scanner notre fichier #[code .pychemin], et de, à l'aide du fichier décrivant la grammaire, extraire les informations utiles à l'exécution.
  p Il y a ici deux concepts importants:
  dl
    dt Les tokens
    dd 
     p Ce sont des objets contenant une propriété #[code value], qui contient la valeur qu'ils représentent, et une propriété #[code type] qui indique la nature de la valeur qu'ils représentent.
    
    dt Les trees
    dd
      p Les trees sont composés d'un type, qui est égal au nom de la règle, et de plusieurs tokens ou autres trees.
      p Similairement aux tokens, les trees ont aussi un type.
  p Notre syntaxe est découpée de la manière suivante:
  pre.
    Dialog
      |—— Ligne #[em 1]
            |—— Indentations #[em 2]
            |—— Directive #[em 3]
  dl.horizontal
    dt: em 1
    dd Une ligne est analogue à une véritable ligne dans le fichier, mais fragmentée selon la grammaire
    br
    
    dt: em 2
    dd Chaque ligne peut avoir zéro, un ou plusieurs tokens d'indentation
    br
    
    dt: em 3
    dd Une directive représente l'instruction décrite dans le fichier #[code .pychemin], tel qu'une ligne du narrateur.
  p Un petit travail de post traitement transforme cette structure d'arbre en une liste de couples #[code (niveau_dindentation, directive)].
  p Connaître ce niveau d'indentation nous sera utile pour traiter les blocs indentés.

  .filename Fichier .pychemin
  pre.
    [Ewen] Je ne sais pas quoi dire.
    >> moi non plus
      [Ewen] Et Melinda ? Tu es d'accord avec elle ?
      >> oui
        #[strong @Melinda:relation +5]
      >?.
        [Ewen] Bref, il faut sortir de cet exemple...
  p Par exemple, voici une représentation d'un AST pour la cinquième ligne de l'extrait ci-dessus
  .image: img(src="./ast_hyperis.png")
  
  h3 walker.py
  p Une fois que notre fichier a été transformé en une liste de directives (avec leur niveau d'indentation respectifs), il faut enfin exécuter ce fichier, et afficher quelque chose au joueur.
  p C'est le travail du #[span.italic walker], qui va itérer chaque ligne et appeler les méthodes correspondantes au type de directive. Chaque directive est associée à une méthode, appelée #[code handle_&lt;type de la directive&gt;].
  p Cependant, ce n'est pas aussi simple pour les directives qui sont conditionnées et ne s'éxecuteront pas à chaque fois.
  
  h4 Gérer les conditions
  .filename Fichier .pychemin
  pre.
      [Artur] C'est bien #name ?
      >> oui
          @Artur:relation +5
      >> non
          Il soupire, désespéré
      >?.
          Il soupire
          [Artur] Je prends ça pour un oui...
  p Ici, la ligne #[code Il soupire, désespéré] ne sera exécutée que si le joueur répond "oui": on ne peut pas juste itérer les lignes une par une et les exécuter: pour gérez des conditions, on doit d'abord collecter les conditions et leur associer des directives à exécuter. Pour cela, la classe #[code Walker] possède plusieurs propriétés.
  p On prendra par la suite l'exemple des directives constituants des questions à poser au joueur, mais une logique similaire est applicables aux directives #[code =?] et #[code =!]
  dl
    dt collecting_input (booléen)
    dd Permet de savoir si l'on est en train de collecter des directives, pour éviter de les exécuter directement.
    
    dt current_input (instance de #[code CurrentInput])
    dd Contient des informations sur la question que l'on va poser. Ses propriétés sont modifiées au fur et à mesure que l'on collecte les informations nécéssaires avant de poser la question au joueur.
  
    dt current_input.actions_map (dictionnaire)
    dd 
      p C'est la propriété centrale de #[code current_input]. Elle contient une corresponsance entre une liste de choix et une liste de directives à exécuter si la réponse de l'utilisateur fait partie des choix correspondant. 
      p Le souci, c'est que python n'accepte pas d'utiliser des listes comme clés de dictionnaires. Il faut donc transformer cette liste en une chaîne de caractères, avec le module #[code json].
    
    p Pour se faire une idée de la logique, voici un exemple:
    
    p On va exécuter l'algorithme suivant pour chaque entrée:
    details(open)
      summary Si en train de collecter des informations sur #[code current_input] 
      p Si nous sommes en train de collecter des informations sur #[code current_input], il y a deux cas possibles:
      details(open)
        summary Si le niveau d'indentation est supérieur à celui de #[code current_input]
        p Dans ce cas là, la directive actuelle est indentée par rapport à la liste de choix précédente: c'est une directive à exécuter si la liste de choix la plus proche est celle choisie par l'utilisateur
        ol
          li On ajoute la directive à #[code current_input.actions_map[current_case]]
      details(open)
        summary Sinon
        p Dans ce cas là, on est face à deux situations:
        details(open)
          summary Si la directive est une liste de choix
          p Dans ce cas, nous sommes passé à la description d'un autre cas.
          ol
            li On ajoute un nouveau cas à #[code current_input.actions_map]
            li On change la valeur de #[code current_case] pour l'actualiser à la nouvelle liste de choix (c'est à dire la directive actuelle)
        details(open)
          summary Sinon
          p Dans ce cas, nous sommes sortis de la condition, et cette ligne décrit tout simplement une directive quelconque qui ne concerne plus la réponse du joueur.
          ol
            li On appelle #[code ui.ask] pour poser la question au joueur
            li On exécute les directives associées à la réponse du joueur
            li On exécute normalement la directive actuelle (voir le dernier "Sinon")
    details(open)
      summary Sinon
      ol
        li On récupère la méthode à appeler en fonction du type de directive
        li On appelle cette méthode
        
    p Cet algorithme marche également dans des situations de blocs imbriqués, avec plusieurs conditions de choix les unes dans les autres, grâce à de la récursion: la méthode appelée pour exécuter les directives collectées est la même que celle dans laquelle l'appel est fait. Par ce moyen, peut importe à quel niveau d'indentation nous sommes, on peut traiter des conditions.
    
    h3 ui.py
    p Ce module décrit exclusivement des éléments liés à ce qui est visible au joueur: comment devrais-je afficher le texte du narrateur, et cætera.
    
    h4 Écrire le texte avec un effet "machine à écrire"
    p Au lieu d'écrire du texte instantanéement, il est plus sympathique et captivant de lire un texte qui s'écrit au fur et à mesure. 
    p La fonction #[code typewritter] répond précisémment à ce besoin, en fragmentant le texte en caractères et en ajoutant un délai entre l'écriture de chaque caractère vers le terminal. De plus, cette fonction ajoute des pauses à la fin des phrases.
    
    h4 Afficher des changements de statistiques
    p Quand une statistique a un nom humain associé, il faut que l'utilisateur voit que sa stat a changée.
    p Pour ce faire, on calcule la différence entre l'ancienne valeur et la nouvelle afin de décider de la couleur du texte.
    p On affiche ensuite l'opération et sa valeur, le nom de la stat et la nouvelle valeur:
    .image: img(src="/stat-changes-ui.png")
    
    h4 Faire parler les personnages
    p Les paroles prononcées par des personnages sont indentiques à celles du narrateur pour la partie texte sauf que l'on préfixe leur texte avec le nom du personnage. 
    p Chaque personnage est un objet instancié de la classe #[code Character], et possède donc une couleur. Elle est utilisée comme couleur de fond pour le nom du personnage, et l'on décide de la couleur du texte en fonction: noir si l'arrière-plan est clair, et blanc dans le cas inverse, pour améliorer la lisibilité du nom.
  
  h2 Notes
  p#fn-1 #[sup 1] Nous n'expliquerons pas les expressions régulières ici, mais vous pouvez vous renseigner en ligne #[a(href="#fn-1-ref-1") ↑]
